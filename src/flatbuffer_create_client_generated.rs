// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod buttplug_ffi {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

pub enum CreateClientOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct CreateClient<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CreateClient<'a> {
    type Inner = CreateClient<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> CreateClient<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        CreateClient {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args CreateClientArgs<'args>) -> flatbuffers::WIPOffset<CreateClient<'bldr>> {
      let mut builder = CreateClientBuilder::new(_fbb);
      if let Some(x) = args.name { builder.add_name(x); }
      builder.finish()
    }

    pub const VT_NAME: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CreateClient::VT_NAME, None)
  }
}

pub struct CreateClientArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for CreateClientArgs<'a> {
    #[inline]
    fn default() -> Self {
        CreateClientArgs {
            name: None,
        }
    }
}
pub struct CreateClientBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> CreateClientBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CreateClient::VT_NAME, name);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CreateClientBuilder<'a, 'b> {
    let start = _fbb.start_table();
    CreateClientBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CreateClient<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_create_client<'a>(buf: &'a [u8]) -> CreateClient<'a> {
  flatbuffers::get_root::<CreateClient<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_create_client<'a>(buf: &'a [u8]) -> CreateClient<'a> {
  flatbuffers::get_size_prefixed_root::<CreateClient<'a>>(buf)
}

#[inline]
pub fn finish_create_client_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<CreateClient<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_create_client_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<CreateClient<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod ButtplugFFI

