// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod buttplug_ffi {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(u8)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum ServerMessageType {
  NONE = 0,
  Ok = 1,
  Error = 2,
  ScanningFinished = 3,
  DeviceAdded = 4,
  DeviceRemoved = 5,

}

pub const ENUM_MIN_SERVER_MESSAGE_TYPE: u8 = 0;
pub const ENUM_MAX_SERVER_MESSAGE_TYPE: u8 = 5;

impl<'a> flatbuffers::Follow<'a> for ServerMessageType {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::read_scalar_at::<Self>(buf, loc)
  }
}

impl flatbuffers::EndianScalar for ServerMessageType {
  #[inline]
  fn to_little_endian(self) -> Self {
    let n = u8::to_le(self as u8);
    let p = &n as *const u8 as *const ServerMessageType;
    unsafe { *p }
  }
  #[inline]
  fn from_little_endian(self) -> Self {
    let n = u8::from_le(self as u8);
    let p = &n as *const u8 as *const ServerMessageType;
    unsafe { *p }
  }
}

impl flatbuffers::Push for ServerMessageType {
    type Output = ServerMessageType;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<ServerMessageType>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SERVER_MESSAGE_TYPE:[ServerMessageType; 6] = [
  ServerMessageType::NONE,
  ServerMessageType::Ok,
  ServerMessageType::Error,
  ServerMessageType::ScanningFinished,
  ServerMessageType::DeviceAdded,
  ServerMessageType::DeviceRemoved
];

#[allow(non_camel_case_types)]
pub const ENUM_NAMES_SERVER_MESSAGE_TYPE:[&'static str; 6] = [
    "NONE",
    "Ok",
    "Error",
    "ScanningFinished",
    "DeviceAdded",
    "DeviceRemoved"
];

pub fn enum_name_server_message_type(e: ServerMessageType) -> &'static str {
  let index = e as u8;
  ENUM_NAMES_SERVER_MESSAGE_TYPE[index as usize]
}

pub struct ServerMessageTypeUnionTableOffset {}
pub enum OkOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Ok<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Ok<'a> {
    type Inner = Ok<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Ok<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Ok {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        _args: &'args OkArgs) -> flatbuffers::WIPOffset<Ok<'bldr>> {
      let mut builder = OkBuilder::new(_fbb);
      builder.finish()
    }

}

pub struct OkArgs {
}
impl<'a> Default for OkArgs {
    #[inline]
    fn default() -> Self {
        OkArgs {
        }
    }
}
pub struct OkBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> OkBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> OkBuilder<'a, 'b> {
    let start = _fbb.start_table();
    OkBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Ok<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum ErrorOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Error<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Error<'a> {
    type Inner = Error<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Error<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Error {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        _args: &'args ErrorArgs) -> flatbuffers::WIPOffset<Error<'bldr>> {
      let mut builder = ErrorBuilder::new(_fbb);
      builder.finish()
    }

}

pub struct ErrorArgs {
}
impl<'a> Default for ErrorArgs {
    #[inline]
    fn default() -> Self {
        ErrorArgs {
        }
    }
}
pub struct ErrorBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ErrorBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ErrorBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ErrorBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Error<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum ScanningFinishedOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct ScanningFinished<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ScanningFinished<'a> {
    type Inner = ScanningFinished<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> ScanningFinished<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ScanningFinished {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        _args: &'args ScanningFinishedArgs) -> flatbuffers::WIPOffset<ScanningFinished<'bldr>> {
      let mut builder = ScanningFinishedBuilder::new(_fbb);
      builder.finish()
    }

}

pub struct ScanningFinishedArgs {
}
impl<'a> Default for ScanningFinishedArgs {
    #[inline]
    fn default() -> Self {
        ScanningFinishedArgs {
        }
    }
}
pub struct ScanningFinishedBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ScanningFinishedBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ScanningFinishedBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ScanningFinishedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ScanningFinished<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum DeviceAddedOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct DeviceAdded<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DeviceAdded<'a> {
    type Inner = DeviceAdded<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> DeviceAdded<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        DeviceAdded {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args DeviceAddedArgs<'args>) -> flatbuffers::WIPOffset<DeviceAdded<'bldr>> {
      let mut builder = DeviceAddedBuilder::new(_fbb);
      if let Some(x) = args.name { builder.add_name(x); }
      builder.finish()
    }

    pub const VT_NAME: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DeviceAdded::VT_NAME, None)
  }
}

pub struct DeviceAddedArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for DeviceAddedArgs<'a> {
    #[inline]
    fn default() -> Self {
        DeviceAddedArgs {
            name: None,
        }
    }
}
pub struct DeviceAddedBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DeviceAddedBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DeviceAdded::VT_NAME, name);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DeviceAddedBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DeviceAddedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DeviceAdded<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum DeviceRemovedOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct DeviceRemoved<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DeviceRemoved<'a> {
    type Inner = DeviceRemoved<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> DeviceRemoved<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        DeviceRemoved {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        _args: &'args DeviceRemovedArgs) -> flatbuffers::WIPOffset<DeviceRemoved<'bldr>> {
      let mut builder = DeviceRemovedBuilder::new(_fbb);
      builder.finish()
    }

}

pub struct DeviceRemovedArgs {
}
impl<'a> Default for DeviceRemovedArgs {
    #[inline]
    fn default() -> Self {
        DeviceRemovedArgs {
        }
    }
}
pub struct DeviceRemovedBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DeviceRemovedBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DeviceRemovedBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DeviceRemovedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DeviceRemoved<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum ServerMessageOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct ServerMessage<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ServerMessage<'a> {
    type Inner = ServerMessage<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> ServerMessage<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        ServerMessage {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args ServerMessageArgs) -> flatbuffers::WIPOffset<ServerMessage<'bldr>> {
      let mut builder = ServerMessageBuilder::new(_fbb);
      if let Some(x) = args.message { builder.add_message(x); }
      builder.add_id(args.id);
      builder.add_message_type(args.message_type);
      builder.finish()
    }

    pub const VT_ID: flatbuffers::VOffsetT = 4;
    pub const VT_MESSAGE_TYPE: flatbuffers::VOffsetT = 6;
    pub const VT_MESSAGE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn id(&self) -> u32 {
    self._tab.get::<u32>(ServerMessage::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn message_type(&self) -> ServerMessageType {
    self._tab.get::<ServerMessageType>(ServerMessage::VT_MESSAGE_TYPE, Some(ServerMessageType::NONE)).unwrap()
  }
  #[inline]
  pub fn message(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(ServerMessage::VT_MESSAGE, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_ok(&self) -> Option<Ok<'a>> {
    if self.message_type() == ServerMessageType::Ok {
      self.message().map(|u| Ok::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_error(&self) -> Option<Error<'a>> {
    if self.message_type() == ServerMessageType::Error {
      self.message().map(|u| Error::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_scanning_finished(&self) -> Option<ScanningFinished<'a>> {
    if self.message_type() == ServerMessageType::ScanningFinished {
      self.message().map(|u| ScanningFinished::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_device_added(&self) -> Option<DeviceAdded<'a>> {
    if self.message_type() == ServerMessageType::DeviceAdded {
      self.message().map(|u| DeviceAdded::init_from_table(u))
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn message_as_device_removed(&self) -> Option<DeviceRemoved<'a>> {
    if self.message_type() == ServerMessageType::DeviceRemoved {
      self.message().map(|u| DeviceRemoved::init_from_table(u))
    } else {
      None
    }
  }

}

pub struct ServerMessageArgs {
    pub id: u32,
    pub message_type: ServerMessageType,
    pub message: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for ServerMessageArgs {
    #[inline]
    fn default() -> Self {
        ServerMessageArgs {
            id: 0,
            message_type: ServerMessageType::NONE,
            message: None,
        }
    }
}
pub struct ServerMessageBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ServerMessageBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(ServerMessage::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_message_type(&mut self, message_type: ServerMessageType) {
    self.fbb_.push_slot::<ServerMessageType>(ServerMessage::VT_MESSAGE_TYPE, message_type, ServerMessageType::NONE);
  }
  #[inline]
  pub fn add_message(&mut self, message: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServerMessage::VT_MESSAGE, message);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ServerMessageBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ServerMessageBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ServerMessage<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_server_message<'a>(buf: &'a [u8]) -> ServerMessage<'a> {
  flatbuffers::get_root::<ServerMessage<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_server_message<'a>(buf: &'a [u8]) -> ServerMessage<'a> {
  flatbuffers::get_size_prefixed_root::<ServerMessage<'a>>(buf)
}

#[inline]
pub fn finish_server_message_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ServerMessage<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_server_message_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<ServerMessage<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod ButtplugFFI

